<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Development Gateway.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Public License v3.0
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/gpl.html
  
  Contributors:
     mpostelnicu
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/integration/jpa http://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<tx:annotation-driven />
	<int:annotation-config />
	<context:component-scan base-package="org.devgateway.eudevfin.financial" />
	<context:annotation-config />

	<jpa:repositories base-package="org.devgateway.eudevfin.financial.repository" />
	<!-- auditing -->
    <jpa:auditing auditor-aware-ref="simpleAuditorAwareImpl" />

	<bean class="org.apache.commons.dbcp.BasicDataSource" id="euDevFinDataSource" >
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
		<property name="url" value="jdbc:derby:memory:eudevfin;create=true" />
		<property name="username" value="app" />
		<property name="password" value="" />	
	</bean>
	
	<!-- initialize a mock jndi builder we use internally to access this datasource from third parties, like CDA -->
	<bean id="simpleJndiBuilder" class="org.springframework.mock.jndi.SimpleNamingContextBuilder"
	factory-method="emptyActivatedContextBuilder" destroy-method="deactivate"/>

	<!--  invoke a void return factory method of the binder with the parameters 
	jndi url plus the existing datasource reference. This will bind the datasource to the JNDI tree for later lookups
	This is used to lookup the datasource through JNDI by the CDA module. Alternatively and probably much slower, we could
	use an XMLA (uses SOAP) channel through spring integration
	 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" >
	<property name="targetObject">
		<ref local="simpleJndiBuilder" />
	</property>
	<property name="targetMethod">
		<value>bind</value>
	</property>
	<property name="arguments">
		<list>
			<value type="java.lang.String">java:comp/env/euDevFinDS</value>
			<ref local="euDevFinDataSource" />
		</list>
	</property>
</bean>



<bean id="financialLiquibase" class="liquibase.integration.spring.SpringLiquibase">
      <property name="dataSource" ref="euDevFinDataSource" />
      <property name="changeLog" value="classpath:financialDbChangelog.xml" />

      <!--
      contexts specifies the runtime contexts to use.    
      <property name="contexts" value="test, production" />
      
      -->
 </bean>



	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="euDevFinDataSource" />
		<property name="packagesToScan" value="org.devgateway.eudevfin" />
		<property name="mappingResources">
			<value>META-INF/orm.xml</value>
		</property>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="jpaProperties">
			<props>
				<prop key="org.hibernate.envers.global_with_modified_flag">true</prop>
				<prop key="org.hibernate.envers.track_entities_changed_in_revision">true</prop>
			</props>
		</property>
		
	</bean> 
	
	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" id="jpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="generateDdl" value="true"></property>
		<property name="database" value="DERBY"></property>		
	</bean>
	<bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
		<constructor-arg index="0" ref="entityManagerFactory"></constructor-arg>
	</bean>
	
	
	<int:channel id="getTransactionChannel"/>
	<int:channel id="replyGetTransactionChannel"/>
	<int:channel id="createTransactionChannel" />
	<int:channel id="replyCreateTransactionChannel" />
	<int:channel id="createOrganizationChannel" />
	<int:channel id="replyCreateOrganizationChannel" />


	<int:gateway id="transactionService"
		service-interface="org.devgateway.eudevfin.financial.service.FinancialTransactionService" />
		
	<int:gateway id="organizationService"
		service-interface="org.devgateway.eudevfin.financial.service.OrganizationService" />

	<!-- <int-jpa:updating-outbound-gateway
		entity-manager-factory="entityManagerFactory" request-channel="createTransactionChannel">

		<int-jpa:transactional transaction-manager="transactionManager" />
	</int-jpa:updating-outbound-gateway>

	<int-jpa:retrieving-outbound-gateway
		request-channel="getTransactionChannel" 
		jpa-query="select tx from FinancialTransaction tx"
		auto-startup="true" 
		entity-manager-factory="entityManagerFactory">
		<int-jpa:transactional propagation="REQUIRES_NEW"
			transaction-manager="transactionManager" />

	</int-jpa:retrieving-outbound-gateway> -->
	
	<!-- <int-jpa:inbound-channel-adapter channel="inboundChannelAdapterOne" 
                    entity-manager-factory="entityManagerFactory" 
                    auto-startup="true" 
                    jpa-query="select tx from FinancialTransaction tx" 
                    expect-single-result="false" 
                    delete-after-poll="false"> 
	    <int:poller fixed-rate="2000" >
	      <int:transactional propagation="REQUIRED" transaction-manager="transactionManager"/>
	    </int:poller>
	</int-jpa:inbound-channel-adapter> -->

</beans>
