<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Development Gateway.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Public License v3.0
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/gpl.html
  
  Contributors:
     mpostelnicu
-->
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<tx:annotation-driven />
	<int:annotation-config />
	<context:component-scan base-package="org.devgateway.eudevfin.financial" />
	<context:annotation-config />

	<!-- Defines the packages where the jpa entity repositories are. These provide access to the entities 
		(orgs, transactions,etc) stored in the db 
	-->
	<jpa:repositories base-package="org.devgateway.eudevfin.financial.repository" />
	<!-- auditing -->
    <jpa:auditing auditor-aware-ref="simpleAuditorAwareImpl" />


	<!-- Get localhost InetAddress to start Derby network server on it. -->
	<bean id="derbyServerIP"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" lazy-init="true">
		<property name="targetObject">
			<bean class="java.net.InetAddress" />
		</property>
		<property name="targetMethod" value="getByName" />
		<property name="arguments" value="localhost" />
	</bean>

	<!-- Create bean of Derby org.apache.derby.drda.NetworkServerControl class -->
	<bean id="derbyServer" class="org.apache.derby.drda.NetworkServerControl"
		destroy-method="shutdown" lazy-init="true">
		<constructor-arg ref="derbyServerIP" />
		<constructor-arg value="1527" />
	</bean>

	<!-- Create Printwriter object to use as log output reader for derby network 
		server -->
	<bean id="pw" class="java.io.PrintWriter" lazy-init="true">
		<constructor-arg>
			<util:constant static-field="java.lang.System.out" />
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	

	<!-- start derby network server,the SpEL provides the start() method only for network mode. This is due to a bug in 
	spring https://jira.springsource.org/browse/SPR-11196 which makes any MethodInvokingFactoryBean to always be lazy-init=false, 
	otherwise would would not need the SpEL here at all since this been would not be required by anyone hence not initialized -->
	<bean id="startDerby" 
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" lazy-init="true" autowire-candidate="false">
		<property name="targetObject" ref="derbyServer" />
		<property name="targetMethod" value="#{'network'.equals(systemProperties['eudevfin.derby.mode'])?'start':'equals'}" />
		<property name="arguments" ref="#{'network'.equals(systemProperties['eudevfin.derby.mode'])?'pw':'pw'}" />
	</bean>

	<!-- Datasource for network mode, this will be instantiated only if network mode derby will be used -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="euDevFinDataSourceNetwork" autowire-candidate="false"
		depends-on="startDerby" lazy-init="true">
		<property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver" />
		<property name="url"  value="jdbc:derby:eudevfin;create=true" />
		<property name="username" value="app" />
		<property name="password" value="" />
	</bean>

	<!-- Datasource for embedded mode, this will be instantiated only if embedded mode derby will be used -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="euDevFinDataSourceEmbedded" lazy-init="true" autowire-candidate="false">
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
		<property name="url" value="jdbc:derby:memory:eudevfin;create=true" />
		<property name="username" value="app" />
		<property name="password" value="" />	
	</bean>

	<!-- this the real datasource, a proxy, it is the only one that can get autowired 
		and it behaves like its target(s) which are never autowired candidates -->
	<bean id="euDevFinDataSource" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target"
			ref="#{'network'.equals(systemProperties['eudevfin.derby.mode'])?'euDevFinDataSourceNetwork':'euDevFinDataSourceEmbedded'}" />
	</bean>
	  
	<!-- initialize a mock jndi builder we use internally to access this datasource 
		from third parties, like CDA -->
	<bean id="simpleJndiBuilder"
		class="org.springframework.mock.jndi.SimpleNamingContextBuilder"
		factory-method="emptyActivatedContextBuilder" destroy-method="deactivate" />

	<!-- invoke a void return factory method of the binder with the parameters 
		jndi url plus the existing datasource reference. This will bind the datasource 
		to the JNDI tree for later lookups This is used to lookup the datasource 
		through JNDI by the CDA module. Alternatively and probably much slower, we 
		could use an XMLA (uses SOAP) channel through spring integration -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="simpleJndiBuilder" />
		<property name="targetMethod" value="bind" />
		<property name="arguments">
			<list>
				<value type="java.lang.String">java:comp/env/euDevFinDS</value>
				<ref local="euDevFinDataSource" />
			</list>
		</property>
	</bean>



	<bean id="financialLiquibase" class="liquibase.integration.spring.SpringLiquibase" lazy-init="false"
		depends-on="contextHelper">
		<property name="dataSource" ref="euDevFinDataSource" />
		<property name="changeLog" value="classpath:financialDbChangelog.xml" />
	</bean>

	<!-- Hibernate / JPA related beans -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="euDevFinDataSource" />
		<property name="packagesToScan" value="org.devgateway.eudevfin" />
		<property name="mappingResources" value="META-INF/orm.xml"/>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="jpaProperties">
			<props>
				<prop key="org.hibernate.envers.global_with_modified_flag">true</prop>
				<prop key="org.hibernate.envers.track_entities_changed_in_revision">true</prop>
			</props>
		</property>
		
	</bean> 
	
	
	
	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" id="jpaVendorAdapter">
		<property name="showSql" value="false" />
		<property name="generateDdl" value="true"/>
		<property name="database" value="DERBY"/>
		<property name="databasePlatform" value="org.hibernate.dialect.DerbyTenSevenDialect"/>
	</bean>
	
	<bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
		<constructor-arg index="0" ref="entityManagerFactory"></constructor-arg>
	</bean>
	
	<!-- The list of channels that are used throughout the financial module -->
	<int:channel id="findAllAsListTransactionChannel"/>
	<int:channel id="saveTransactionChannel" />
	<int:channel id="findTransactionByIdChannel" />
	<int:channel id="saveOrganizationChannel" />
	<int:channel id="saveCategoryChannel" />
	<int:channel id="findAllAsListCategoryChannel" />
	<int:channel id="findCategoryByIdChannel" />
	<int:channel id="findCategoryByCodeChannel" />
	<int:channel id="findCategoryByLabelCodeChannel" />
	<int:channel id="findTransactionBySectorCodePageableChannel" />
	<int:channel id="getFinancialTransactionHistoricalExchangeRatesChannel"/>

	<!-- 	Router that sends the requests to the appropriate channels where they will usually be handled by ServiceActivators. 
			The name of the request channels is taken from the 'requestName' header parameter
	 -->
	<int:header-value-router input-channel="getChannel" header-name="requestName"/>


</beans>
